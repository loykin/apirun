name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  test:
    name: Go Test
    runs-on: ubuntu-latest
    env:
      CGO_ENABLED: 0
    services:
      postgres:
        image: postgres:16
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 10
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      - name: Set up Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00
        with:
          go-version-file: go.mod
          cache: true

      - name: Show Go version
        run: go version

      - name: Download dependencies
        run: go mod download

      - name: Vet
        run: go vet ./...

      - name: Install staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Staticcheck
        run: $(go env GOPATH)/bin/staticcheck ./...

      - name: Install gosec
        run: go install github.com/securego/gosec/v2/cmd/gosec@latest

      - name: Run gosec (static analysis)
        run: |
          set -e
          $(go env GOPATH)/bin/gosec -no-fail -fmt=json -out=gosec-report.json ./...

      - name: Upload gosec report artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: gosec-report
          path: gosec-report.json

      - name: Trivy Scan (Go dependencies)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          format: json
          output: trivy-report.json

      - name: Upload Trivy report artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: trivy-report
          path: trivy-report.json

      - name: Build (all packages)
        run: go build ./...

      - name: Build apirun binary
        run: |
          go build -o apirun ./cmd/apirun
          chmod +x apirun

      - name: Run safe examples (self-contained, no external services)
        run: |
          set -e
          echo "Running examples/auth_embedded"
          go run ./examples/auth_embedded
          echo "Running examples/auth_embedded_multi_registry"
          go run ./examples/auth_embedded_multi_registry
          echo "Running examples/auth_embedded_multi_registry_type2"
          go run ./examples/auth_embedded_multi_registry_type2
          echo "Running examples/auth_embedded_lazy"
          go run ./examples/auth_embedded_lazy
          echo "Running examples/auth_registry"
          go run ./examples/auth_registry
          echo "Running examples/embedded_sqlite"
          go run ./examples/embedded_sqlite
          echo "Running examples/embedded_custom_table"
          go run ./examples/embedded_custom_table
          echo "Running examples/embedded_tls"
          go run ./examples/embedded_tls
          echo "Running examples/status_embedded"
          go run ./examples/status_embedded
          echo "Running examples/embedded_create"
          go run ./examples/embedded_create
          echo "Running examples/embedded_logging"
          go run ./examples/embedded_logging
          echo "Running examples/masking_demo"
          go run ./examples/masking_demo
          echo "Running examples/color_demo"
          go run ./examples/color_demo
          echo "RUnning examples/metrics_demo"
          go run ./examples/metrics_demo
          echo "Running examples/stages_embedded"
          cd examples/stages_embedded && ../../apirun stages up && cd ../..
        env:
          CI: true

      - name: Run embedded_postgresql example (with Postgres service)
        run: |
          set -e
          echo "Waiting for Postgres service to be ready..."
          for i in {1..60}; do
            (echo > /dev/tcp/127.0.0.1/5432) >/dev/null 2>&1 && break
            sleep 1
          done
          echo "Running examples/embedded_postgresql"
          PG_DSN="postgres://postgres:postgres@127.0.0.1:5432/postgres?sslmode=disable" go run ./examples/embedded_postgresql

      - name: Build examples that require external services (do not run)
        run: |
          set -e
          go build ./examples/embedded
          go build ./examples/embedded_postgresql

      - name: Run tests with coverage (exclude examples)
        env:
          CGO_ENABLED: 1
        run: go test -p 1 -race -covermode=atomic -coverprofile=coverage.out $(go list ./... | grep -v '/examples/')

      - name: Show coverage summary
        run: go tool cover -func=coverage.out | tail -n 1

      - name: Upload coverage artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: coverage
          path: coverage.out

  publish-coverage:
    name: Publish Coverage (Shields)
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      - name: Download coverage artifact
        uses: actions/download-artifact@018cc2cf5baa6db3ef3c5f8a56943fffe632ef53
        with:
          name: coverage
          path: .

      - name: Extract coverage percentage
        shell: bash
        run: |
          set -euo pipefail
          LINE=$(go tool cover -func=coverage.out | tail -n 1)
          PCT=$(echo "$LINE" | awk '{print $3}')
          PCT_NUM=${PCT%%%}
          if [ "${PCT_NUM%.*}" -ge 80 ]; then COLOR=brightgreen
          elif [ "${PCT_NUM%.*}" -ge 60 ]; then COLOR=yellow
          else COLOR=red
          fi
          echo "COVERAGE=$PCT_NUM" >> "$GITHUB_ENV"
          echo "BADGE_COLOR=$COLOR" >> "$GITHUB_ENV"

      - name: Prepare Shields endpoint JSON
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p shields
          cat > shields/coverage.json <<EOF
          {
            "schemaVersion": 1,
            "label": "coverage",
            "message": "${COVERAGE}%",
            "color": "${BADGE_COLOR}"
          }
          EOF

      - name: Publish coverage endpoint to gh-pages
        uses: peaceiris/actions-gh-pages@4f9cc6602d3f66b9c108549d475ec49e8ef4d45e
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: shields
          destination_dir: shields
          keep_files: true
          commit_message: "chore(ci): publish coverage endpoint (Shields)"

      - name: Download Trivy report artifact
        uses: actions/download-artifact@018cc2cf5baa6db3ef3c5f8a56943fffe632ef53
        with:
          name: trivy-report
          path: .

      - name: Prepare Trivy Shields JSON (severity-based)
        shell: bash
        run: |
          mkdir -p shields
          CRITICAL=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-report.json)
          HIGH=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="HIGH")] | length' trivy-report.json)
          MEDIUM=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' trivy-report.json)
          LOW=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="LOW")] | length' trivy-report.json)

          TOTAL=$((CRITICAL + HIGH + MEDIUM + LOW))

          if [ $((CRITICAL + HIGH)) -gt 0 ]; then
            COLOR=red
          elif [ $MEDIUM -gt 0 ]; then
            COLOR=yellow
          else
            COLOR=brightgreen
          fi

          echo "{\"schemaVersion\":1,\"label\":\"Trivy\",\"message\":\"$TOTAL\",\"color\":\"$COLOR\"}" > shields/trivy.json

      - name: Publish Trivy badge to gh-pages
        uses: peaceiris/actions-gh-pages@4f9cc6602d3f66b9c108549d475ec49e8ef4d45e
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: shields
          destination_dir: shields
          keep_files: true
          commit_message: "chore(ci): publish Trivy badge (Shields)"
